<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 配置拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 拦截所有mvc控制器 -->
            <mvc:mapping path="/**"/>
            <!-- mvc:exclude-mapping是另外一种拦截，它可以在你后来的测试中对某个页面进行不拦截，这样就不用在
                LoginInterceptor的preHandler方法里面获取不拦截的请求uri地址了(优选) -->
            <!--不拦截的url-->
            <mvc:exclude-mapping path="/index*"/>
            <mvc:exclude-mapping path="/*login*"/>
            <mvc:exclude-mapping path="/*reg*"/>
            <!--登陆拦截器-->
            <bean class="com.testonline.interceptor.LoginInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 拦截所有mvc控制器 -->
            <mvc:mapping path="/admin*"/>
            <!-- mvc:exclude-mapping是另外一种拦截，它可以在你后来的测试中对某个页面进行不拦截，这样就不用在
                AdminInterceptor的preHandler方法里面获取不拦截的请求uri地址了(优选) -->
            <bean class="com.testonline.interceptor.AdminLoginInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 加载controller需要的配置信息(分页信息) -->
    <context:property-placeholder location="classpath:page.properties" ignore-unresolvable="true"
                                  file-encoding="UTF-8"/>

    <!--配置自动扫描的包-->
    <context:component-scan base-package="com.testonline.controller"></context:component-scan>

    <!--配置视图解析器，方便页面返回  -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>


    <!--两个标准配置  -->
    <!-- 将springmvc不能处理的请求交给tomcat，解决静态资源无法被springMVC处理的问题 -->
    <mvc:default-servlet-handler/>
    <!-- 能支持springmvc更高级的一些功能，JSR303校验，快捷的ajax...映射动态请求 -->
    <!-- 注解驱动 -->
    <mvc:annotation-driven/>


</beans>